name: Synapse_Triggers_Annotations
on: [push]
# on: 
#   workflow_dispatch

jobs:
  release:
    runs-on: windows-latest
    env:
      SynapseWorkspace: "testtriggerautomate"
      ResourceGroup: "RG-Metrolinx"
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Install the powershell dependencies
        shell: pwsh
        run: |
          Install-Module -Name Az.Synapse -AllowClobber -Scope CurrentUser -Force
          Import-Module Az.Synapse 

      - uses: actions/checkout@v1 
      - name: Run a one-line script
        shell: powershell
        run: |
          $scriptPath = "Triggers_Annotations.ps1"
          pwsh -ExecutionPolicy Bypass -File $scriptPath

      - uses: actions/checkout@v1 
      - name: Run a one-line script
        shell: powershell
        run: |
          $scriptPath = "Triggers_Annotations_Start.ps1"
          pwsh -ExecutionPolicy Bypass -File $scriptPath  

      # - uses: actions/checkout@v1 
      # - name: Run a one-line script
      #   shell: powershell
      #   run: |
      #     $env:SynapseWorkspace
      #     $env:ResourceGroup
      #     $Annotations = "LDS"
      #     $NameFilter = ""

      #     # Get the specified workspace
      #     Write-Output ("Getting workspace {0} in resource group {1}" -f "$env:SynapseWorkspace", "$env:ResourceGroup")
      #     $workspace = Get-AzSynapseWorkspace -ResourceGroupName "$env:ResourceGroup" -Name "$env:SynapseWorkspace"
      #     if (-not($workspace)) { throw "Could not find workspace" }
      #     Write-Output $workspace

      #     # Get the list of triggers if the workspace 
      #     Write-Output "Getting triggers"
      #     $triggers = Get-AzSynapseTrigger -WorkspaceObject $workspace
      #     $stoppedTriggers = $Triggers | Where-Object { $_.Properties.RuntimeState -eq "Stopped" }
      #     $startedTriggers = @()
      #     if ($namefilter -ne '-') { $triggers = $triggers | Where-Object { $_.Name -match $namefilter } } # filter out names if the filter is specified
      #     Write-Output ("Found {0} triggers" -f $triggers.Count)
      #     if (-not($triggers)) { exit }

      #     foreach ($trigger in $Triggers) {
      #      if(($Trigger.Properties.Annotations[0] -eq $Annotations) -and ($Trigger.Properties.RuntimeState -eq "Started"))
      #         {
      #     # Stop the Triggers that were in "Started" state
      #     Stop-AzSynapseTrigger -WorkspaceName "$env:SynapseWorkspace" -Name $trigger.Name
      #     $startedTriggers += $trigger.Name
      #     Write-Host "Stopped trigger $($trigger.Name)."
      #     } elseif ($trigger.Triggerstate -eq "Stopped") {
      #         Write-Host "Trigger $($trigger.Name) is already in a stopped state."
      #     } else {
      #         Write-Host "Trigger $($trigger.Name) is in an unknown state: $($trigger.Triggerstate)."
      #     }
      #     }
