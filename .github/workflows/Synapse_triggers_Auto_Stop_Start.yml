name: Synapse_Triggers_Annotations
on: [push]
# on: 
#  workflow_dispatch
env:
  TargetSynapseWorkspace: "testtriggerautomate"
  SourceSynapseWorkspace: "testtriggerautomate2"
  ResourceGroup: "RG-Metrolinx"
  clientAppId: ${{ secrets.CLIENT_ID }}
  clientSecret: ${{ secrets.CLIENT_SECRET }}
  subscriptionId: ${{ secrets.SUBSCRIPTION_ID}}
  tenantId: ${{ secrets.TENANT_ID}}
jobs:
  release:
    runs-on: windows-latest
    env:
      TargetSynapseWorkspace: "testtriggerautomate"
      SourceSynapseWorkspace: "testtriggerautomate2"
      ResourceGroup: "RG-Metrolinx"
      # clientAppId: ${{ secrets.CLIENT_ID }}
      # clientSecret: ${{ secrets.CLIENT_SECRET }}
      # subscriptionId: ${{ secrets.SUBSCRIPTION_ID}}
      # tenantId: ${{ secrets.TENANT_ID}}
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_2 }}
          enable-AzPSSession: true
      - name: Install the powershell dependencies and run script for 2
        shell: pwsh
        run: |
          Install-Module -Name Az.Synapse -AllowClobber -Scope CurrentUser -Force
          Import-Module Az.Synapse

          $ResourceGroupName = '${{ env.ResourceGroup }}'
          $SynapseWorkspace = '${{ env.SourceSynapseWorkspace }}'
          # az synapse role definition list --workspace-name $SynapseWorkspace
          $workspace = Get-AzSynapseWorkspace -ResourceGroupName $ResourceGroupName -Name $SynapseWorkspace
          $Triggers = Get-AzSynapseTrigger -WorkspaceObject $workspace
          $startedTriggers = @()
          foreach ($trigger in $Triggers) {
          Write-Host "Start"
          $trigger.Name
           if($Trigger.Properties.RuntimeState -eq "Started")
              {
              Stop-AzSynapseTrigger -WorkspaceName $SynapseWorkspace -Name $trigger.Name
              $startedTriggers += $trigger.Name
              Write-Host "Stopped trigger $($trigger.Name)."
          } elseif ($Trigger.Properties.RuntimeState -eq "Stopped") {
              Write-Host "Trigger $($trigger.Name) is already in a stopped state."
          }
          }
          echo "---------------------------"
          echo $startedTriggers
          $jsonString = ConvertTo-Json -InputObject $startedTriggers
          Out-File -FilePath "Dev_started_triggers.json" -InputObject $jsonString

      - uses: actions/upload-artifact@v3
        with:
          name: Dev_started-triggers
          path: Dev_started_triggers.json

      - name: Download artifact and access array
        uses: actions/download-artifact@v3
        with:
          name: Dev_started-triggers  
  
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
      - name: Install the powershell dependencies and run script
        shell: pwsh
        run: |
          Install-Module -Name Az.Synapse -AllowClobber -Scope CurrentUser -Force
          Import-Module Az.Synapse
          $ResourceGroupName = '${{ env.ResourceGroup }}'
          $SynapseWorkspace = '${{ env.TargetSynapseWorkspace }}'
          $workspace = Get-AzSynapseWorkspace -ResourceGroupName $ResourceGroupName -Name $SynapseWorkspace
          $Triggers = Get-AzSynapseTrigger -WorkspaceObject $workspace
          $startedTriggers = @()
          foreach ($trigger in $Triggers) {
          Write-Host "Start"
          $trigger.Name
           if($Trigger.Properties.RuntimeState -eq "Started")
              {
              Stop-AzSynapseTrigger -WorkspaceName $SynapseWorkspace -Name $trigger.Name
              $startedTriggers += $trigger.Name
              Write-Host "Stopped trigger $($trigger.Name)."
          } elseif ($Trigger.Properties.RuntimeState -eq "Stopped") {
              Write-Host "Trigger $($trigger.Name) is already in a stopped state."
          }
          }
          echo "---------------------------"
          echo $startedTriggers
          $jsonString = ConvertTo-Json -InputObject $startedTriggers
          Out-File -FilePath "UAT_started_triggers.json" -InputObject $jsonString

      - uses: actions/upload-artifact@v3
        with:
          name: UAT_started-triggers
          path: UAT_started_triggers.json
          
      - name: Download artifact and access array
        uses: actions/download-artifact@v3
        with:
          name: UAT_started-triggers
          
      - name: Deploy to UAT
        uses: Azure/synapse-workspace-deployment@V1.8.0
        with:
          TargetWorkspaceName: '${{ env.TargetSynapseWorkspace }}'
          TemplateFile: ./synw/TemplateForWorkspace.json
          ParametersFile: ./synw/TemplateParametersForUat.json
          environment: Azure Public
          resourceGroup: '${{ env.ResourceGroup }}'
          clientId: '${{ env.clientAppId }}'
          clientSecret: '${{ env.clientAppSecret }}'
          subscriptionId: '${{ env.subscriptionId }}'
          tenantId: '${{ env.tenantId }}'
          managedIdentity: 'False'
          operation: deploy
      
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_2 }}
          enable-AzPSSession: true

      - name: run script for 2
        shell: pwsh
        run: |
          Install-Module -Name Az.Synapse -AllowClobber -Scope CurrentUser -Force
          Import-Module Az.Synapse

          $ResourceGroupName = '${{ env.ResourceGroup }}'
          $SynapseWorkspace = '${{ env.SourceSynapseWorkspace }}'
          $workspace = Get-AzSynapseWorkspace -ResourceGroupName $ResourceGroupName -Name $SynapseWorkspace
          $Triggers = Get-AzSynapseTrigger -WorkspaceObject $workspace

          $triggertostop = Get-Content -Path "Dev_started_triggers.json"
          $powershellArray = $triggertostop | ConvertFrom-Json
          echo "-----list-json-file-----"
          echo $powershellArray
          $file = "Dev_started_triggers.json"
          $item = Get-Item $file
          $filePath = $item.FullName
          Write-Host "The complete path of the file is: $filePath"
          $token = Get-AzAccessToken -ResourceUrl https://dev.azuresynapse.net
          $authHeader = @{
            'Content-Type'  = 'application/octet-stream'
            'Authorization' = 'Bearer ' + $token.Token
          }

          foreach ($triggerName in $powershellArray) {
              $apicall = "https://${{ env.SourceSynapseWorkspace }}.dev.azuresynapse.net/triggers/" + $triggerName + "/start?api-version=2020-12-01"
              echo $apicall
              Invoke-WebRequest -Method POST -Uri $apicall -Headers $authHeader
              echo $triggerName
              Write-Host "Started trigger $triggerName."
          }

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: run script
        shell: pwsh
        run: |
          Install-Module -Name Az.Synapse -AllowClobber -Scope CurrentUser -Force
          Import-Module Az.Synapse
          $ResourceGroupName = '${{ env.ResourceGroup }}'
          $SynapseWorkspace = '${{ env.TargetSynapseWorkspace }}'
          $workspace = Get-AzSynapseWorkspace -ResourceGroupName $ResourceGroupName -Name $SynapseWorkspace
          $Triggers = Get-AzSynapseTrigger -WorkspaceObject $workspace

          # $triggertostop = Get-Content -Path "D:\a\GitHubActionsDemo\GitHubActionsDemo\started_triggers.json"
          $triggertostop = Get-Content -Path "UAT_started_triggers.json"

          $powershellArray = $triggertostop | ConvertFrom-Json
          echo "-----list-json-file-----"
          echo $powershellArray
          $file = "UAT_started_triggers.json"
          $item = Get-Item $file
          $filePath = $item.FullName
          Write-Host "The complete path of the file is: $filePath"
          $token = Get-AzAccessToken -ResourceUrl https://dev.azuresynapse.net
          $authHeader = @{
            'Content-Type'  = 'application/octet-stream'
            'Authorization' = 'Bearer ' + $token.Token
          }
          
          foreach ($triggerName in $powershellArray) {
              $apicall = "https://${{ env.TargetSynapseWorkspace }}.dev.azuresynapse.net/triggers/" + $triggerName + "/start?api-version=2020-12-01"
              echo $apicall
              Invoke-WebRequest -Method POST -Uri $apicall -Headers $authHeader
              echo $triggerName
              Write-Host "Started trigger $triggerName."
          }
